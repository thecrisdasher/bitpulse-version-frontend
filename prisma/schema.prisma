datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  cliente
  admin
  maestro
}

enum TransactionStatus {
  pending
  completed
  failed
}

enum PositionDirection {
  long
  short
}

enum PositionStatus {
  open
  closed
  liquidated
}

enum WithdrawalType {
  bank_account
  crypto
}

enum WithdrawalStatus {
  pending
  approved
  rejected
  processed
}

// ---------------------------
// 🚀 Módulo de Chat en vivo
// ---------------------------

enum ChatRoomType {
  private
  general
}

model User {
  id                        String                  @id @default(uuid())
  username                  String                  @unique
  email                     String                  @unique
  password                  String
  firstName                 String
  lastName                  String
  role                      UserRole                @default(cliente)
  emailConfirmed            Boolean                 @default(false)
  emailConfirmationToken    String?
  emailConfirmationExpiresAt DateTime?
  // Campos para aprobación manual por admin
  adminApprovalRequired     Boolean                 @default(true)
  adminApproved             Boolean                 @default(false)
  adminApprovalRequestedAt  DateTime?
  adminApprovalExpiresAt    DateTime?
  adminApprovedBy           String?
  adminApprovalNotes        String?
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  lastLogin                 DateTime?
  isActive                  Boolean                 @default(true)
  profilePicture            String?
  preferences               Json?
  pejecoins                 Float                   @default(0)
  sessions                  Session[]
  positions                 TradePosition[]
  transactionsTo            PejeCoinTransaction[]   @relation("TransactionsTo")
  transactionsFrom          PejeCoinTransaction[]   @relation("TransactionsFrom")
  activities                UserActivity[]
  balance                   Float                   @default(10000)
  refreshTokens             RefreshToken[]
  twoFactorEnabled          Boolean                 @default(false)
  twoFactorSecret           String?
  mentorAssignments         MentorAssignment[]        @relation("UserMentorAssignments")
  menteeAssignments         MentorAssignment[]        @relation("MentorMentorAssignments")
  notifications             Notification[]
  chatParticipants          ChatParticipant[]         @relation("UserChatParticipants")
  messagesSent              Message[]                 @relation("UserMessages")
  clientComments            ClientComment[]           @relation("ClientComments")
  authoredComments          ClientComment[]           @relation("AuthorComments")
  withdrawals               Withdrawal[]              @relation("UserWithdrawals")
  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  token        String   @unique
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  isValid      Boolean  @default(true)
}

model PejeCoinTransaction {
  id            String     @id @default(uuid())
  fromUser      User?      @relation("TransactionsFrom", fields: [fromUserId], references: [id])
  fromUserId    String?
  toUser        User       @relation("TransactionsTo", fields: [toUserId], references: [id])
  toUserId      String
  amount        Float
  concept       String
  timestamp     DateTime   @default(now())
  status        String
  referenceId   String?
}

model TradePosition {
  id              String                @id @default(uuid())
  user            User                  @relation(fields: [userId], references: [id])
  userId          String
  instrument      String
  direction       PositionDirection
  openPrice       Float
  currentPrice    Float
  amount          Float
  leverage        Float
  openTime        DateTime              @default(now())
  closeTime       DateTime?
  profit          Float?
  status          PositionStatus        @default(open)
  stopLoss        Float?
  takeProfit      Float?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  marketColor     String?
  stake           Float                 @default(0)
  durationValue   Int
  durationUnit    String
  capitalFraction Float?
  lotSize         Float?
  marginRequired  Float?
  positionValue   Float?
  modifications   PositionModification[]
}

model UserActivity {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  action     String
  details    Json
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ChatRoom {
  id            String            @id @default(uuid())
  type          ChatRoomType
  name          String?
  createdBy     String?
  participants  ChatParticipant[]
  messages      Message[]
  createdAt     DateTime          @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ChatParticipant {
  id        String   @id @default(uuid())
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String
  user      User     @relation("UserChatParticipants", fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  body      String
  createdAt DateTime @default(now())
  status    String   @default("delivered")
  attachments Json?
}

model MentorAssignment {
  id          String   @id @default(uuid())
  user        User     @relation("UserMentorAssignments", fields: [userId], references: [id])
  userId      String
  mentor      User     @relation("MentorMentorAssignments", fields: [mentorId], references: [id])
  mentorId    String
  assignedAt  DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  body      String
  link      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// ---------------------------
// 🚀 Módulo de Comentarios de Clientes
// ---------------------------

model CommentTag {
  id           String         @id @default(uuid())
  name         String         @unique
  color        String         @default("#3B82F6") // Color hexadecimal para la etiqueta
  description  String?
  createdAt    DateTime       @default(now())
  comments     ClientComment[] @relation("CommentTags")
  
  @@map("comment_tags")
}

model ClientComment {
  id          String      @id @default(uuid())
  client      User        @relation("ClientComments", fields: [clientId], references: [id])
  clientId    String
  author      User        @relation("AuthorComments", fields: [authorId], references: [id])
  authorId    String      // Maestro o Admin que hace el comentario
  content     String      // Contenido del comentario
  tags        CommentTag[] @relation("CommentTags")
  isPrivate   Boolean     @default(false) // Para comentarios privados solo visibles para admins
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("client_comments")
}

// ---------------------------
// 🚀 Módulo de Modificaciones de Posiciones
// ---------------------------

model PositionModification {
  id              String        @id @default(uuid())
  position        TradePosition @relation(fields: [positionId], references: [id])
  positionId      String
  modifiedBy      String        // ID del usuario que hizo la modificación
  modifiedByName  String        // Nombre completo del usuario para registro histórico
  field           String        // Campo modificado: 'currentPrice', 'stopLoss', 'takeProfit'
  oldValue        Json          // Valor anterior
  newValue        Json          // Valor nuevo
  reason          String        // Razón de la modificación
  timestamp       DateTime      @default(now())
  
  @@map("position_modifications")
}

// ---------------------------
// 🚀 Módulo de Retiros
// ---------------------------

model Withdrawal {
  id              String           @id @default(uuid())
  user            User             @relation("UserWithdrawals", fields: [userId], references: [id])
  userId          String
  type            WithdrawalType   // bank_account | crypto
  amount          Float            // Monto en USD
  status          WithdrawalStatus @default(pending)
  
  // Campos para Cuenta Bancaria
  bankName        String?
  accountType     String?          // Ahorros | Corriente
  accountNumber   String?
  city            String?
  
  // Campos para Criptomonedas
  cryptoType      String?          // USDT | USDC | BTC
  networkType     String?          // Red blockchain
  walletAddress   String?
  
  // Metadatos
  requestedAt     DateTime         @default(now())
  processedAt     DateTime?
  processedBy     String?          // ID del admin que procesó
  adminNotes      String?          // Notas del administrador
  
  @@map("withdrawals")
}